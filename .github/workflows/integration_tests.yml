# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: integration-tests
on:
  #TODO: switch to building on PR after confirming this works
  push:
    branches:
      - 'feature/*'
permissions:
  contents: write
jobs:
  integration-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./examples/aks_cluster
    env:
      #NOTE: Case matters for the name of these TF_VAR_ environment variables.
      TF_VAR_appId: ${{ secrets.TF_VAR_APPID }}
      TF_VAR_password: ${{ secrets.TF_VAR_PASSWORD }}
      TF_VAR_subscriptionId: ${{ secrets.TF_VAR_SUBSCRIPTIONID }}
      TF_VAR_tenantId: ${{ secrets.TF_VAR_TENANTID}}
      TSM_APIKEY: ${{ secrets.TSM_APIKEY }}
      TSM_HOST: ${{ secrets.TSM_HOST }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Unshallow
        run: git fetch --prune --unshallow
      - 
        name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      -
        name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true
          working-directory: ./
      - 
        name: Build
        run: make build
        working-directory: ./

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.1

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        #if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false